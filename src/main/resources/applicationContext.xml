<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:aop="http://www.springframework.org/schema/aop"  
        xmlns:p="http://www.springframework.org/schema/p"  
        xmlns:tx="http://www.springframework.org/schema/tx"  
        xmlns:context="http://www.springframework.org/schema/context"  
        xsi:schemaLocation="   
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd   
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd   
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context.xsd">  

	<!--扫描包，提供注解支持;不扫描@Controller注解。
	通过Spring提供的IoC容器，可以将对象之间的依赖关系交由Spring进行控制，
	避免硬编码所造成的过度程序耦合。-->
    <context:component-scan base-package="cn.smbms" >
			<context:exclude-filter type="annotation"
									expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

    <!-- 读取数据库配置文件 -->
    <context:property-placeholder
			location="classpath:database.properties"/>
    
    <!-- JNDI获取数据源(使用dbcp连接池).
     destroy-method定义容器销毁时的操作，即容器关闭执行close方法-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
	destroy-method="close" scope="singleton">
			<!-- 驱动程序 -->
    		<property name="driverClassName" value="${driver}" />
			<!-- 连接数据库的地址 -->
			<property name="url" value="${url}" />
			<!-- 用户名 -->
			<property name="username" value="${user}" />
			<!-- 密码 -->
			<property name="password" value="${password}" />
			<!-- 数据库连接池初始化连接时第一次要创建连接的个数 -->
			<property name="initialSize" value="${initialSize}"/>
			<!-- 连接池中同时连接的最大连接（活动）数，表示单机并发可以支持n个  默认值为：8 -->
			<property name="maxActive" value="${maxActive}"/>
		<!-- 允许连接池中最大空闲数，超过的会被释放，设置为负数意为不限制，不能设置太小。
             高负载的情况下，连接打开时间比关闭的时间快，这样会引起空闲连接个数上升，并且超过
             最大的空闲数，会造成连接频繁销毁和创建，导致性能下降   默认值为：8-->
			<property name="maxIdle" value="${maxIdle}"/>
		<!-- 最小连接数  低于最小连接数时连接池就会创建连接  默认为：0 接近maxIdle性能越好 -->
			<property name="minIdle" value="${minIdle}"/>
		<!-- 最大的等待时间 当连接池没有可用的连接，需要等待连接释放的最大时间，等待时间超过
            就会抛出异常 默认为-1意为无限等待，配置maxWait避免线程池不够用而导致请求被无限挂起-->
			<property name="maxWait" value="${maxWait}0"/>
		<!-- 是否开启无用连接的回收机制 -->
			<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
		<!-- 连接池超出配置时间时，将回收没用的连接 建议配置时间短一些，快回收 -->
			<property name="removeAbandoned" value="${removeAbandoned}"/>

		<!-- 假如数据库突然宕机、或者被停了，连接池连接无效，用户使用系统功能查询时无法使用数据库。
             当你稍后启动数据库时，应用程序不重启，可能会读取到以前的旧数据，要达到正常读取，还需
              重启应用程序。当只想重启数据库，不重启系统时，sql心跳包就是解决数据库重新连接的问题。 -->
		<!-- sql心跳 ：保证连接池中连接是真实有效的连接，没用的连接需要回收。
		如果无用的连接不回收的话，连接池还会把它作为一个空闲连接标记在里面；
		如果高并发的情况下应用程序用到了无用的连接就会报错。-->
		<!--开启Evict【驱逐】的定时校验，循环校验，没用的连接回收-->
			<property name= "testWhileIdle" value="true"/>
			<!--在进行borrowObject处理时，会对拿到的连接进行校验，若为false则不校验-->
			<property name= "testOnBorrow" value="false"/>
			<!--在进行returnObject处理时，会对返回的连接进行校验，若为false则不校验-->
			<property name= "testOnReturn" value="false"/>
			<!--mysql默认8个小时没有连接就会主动断掉所有连接。
			通过validationQuery连接校验，需要它和数据库保持连接。
			保持心跳，证明活着，避免被意外回收。-->
			<property name= "validationQuery" value="select 1"/>
			<!--定义Evict的时间间隔，单位：毫秒，大于0才会开启evict-->
			<property name= "timeBetweenEvictionRunsMillis" value="60000"/>
			<!--配置每次校验连接的数量，一般等于maxActive。-->
			<property name= "numTestsPerEvictionRun" value="${maxActive}"/>
    </bean>

   	<!-- 配置mybitas SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    	<property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

	<!--MapperScannerConfigurer,
  将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。
  basePackage属性是让你为映射器接口文件设置基本的包路径。
  你可以使用分号或逗号作为分隔符设置多于一个的包路径。
  每个映射器将会在指定的包路径中递归地被搜索到。
  MapperFactoryBean 创建的代理类实现了 UserMapper 接口,
    并且注入到应用程序中,完成自动装配。
    因为代理创建在运行时环境中(Runtime) ,那么指定的映射器必须是一个接口,
    而 不是一个具体的实现类。-->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.smbms.dao*"/>
	</bean>-->

	<!-- 配置事务管理器 -->
	<bean id="txManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

   	<!-- AOP 事务处理 开始 -->
	<!--1.注解方式配置声明式事务-->
	<tx:annotation-driven transaction-manager="txManager"/>
	<!--2.配置文件方式配置声明式事务-->
	<!--<aop:config  proxy-target-class="true">
		<aop:pointcut expression="execution(* com.ssm.service..*(..))"
					  id="transService"/>
		<aop:advisor pointcut-ref="transService" advice-ref="txAdvice" />
	</aop:config> 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>  
	       <tx:method name="smbms*"  propagation="REQUIRED"
					  rollback-for="Exception"  />
	    </tx:attributes>  
	</tx:advice> -->
	<!-- AOP 事务处理 结束 -->

	<!--开启aop注解配置。
	通过Spring提供的AOP功能，方便进行面向切面的编程，如性能监测、事务管理、日志记录等。-->
	<aop:aspectj-autoproxy />

</beans>